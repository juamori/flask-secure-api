name: CI, Security & DAST Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # --- JOB 1: Build e Testes Unitários ---
  build-and-test:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run unit tests with pytest
        run: pytest -q tests/
        env:
          PYTHONPATH: .

  # --- JOB 2: Análise de Segurança Estática (SAST & SCA) ---
  security-scan:
    name: SAST & SCA Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    permissions:
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Etapa SAST (Semgrep) ---
      - name: Run Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: 'p/python auto semgrep.yml'
          format: sarif
          output: semgrep.sarif
        continue-on-error: true

      - name: Create empty SARIF file if none exists
        if: ${{ success() && ! hashFiles('semgrep.sarif') }}
        run: |
          echo '{"version": "2.1.0", "runs": [], "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json"}' > semgrep.sarif

      - name: Upload Semgrep SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          
      # --- Etapa SCA (pip-audit) ---
      - name: Set up Python for SCA
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install pip-audit
        run: pip install pip-audit

      - name: Run pip-audit SCA Scan
        run: pip-audit -r requirements.txt --format json > pip-audit.json
      
      - name: Upload pip-audit report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit.json

  # --- JOB 3: Teste de Segurança Dinâmico (DAST) ---
  dast:
    name: DAST Scan with OWASP ZAP
    runs-on: ubuntu-latest
    needs: security-scan

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start application with docker-compose
        run: docker-compose up -d --build

      - name: Wait for API to be ready
        run: |
          echo "Waiting for API to start..."
          timeout 60s bash -c 'until curl -s http://localhost:5000/ > /dev/null; do echo "API not up yet, sleeping for 3s..."; sleep 3; done'
          echo "API is ready!"
      
      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://host.docker.internal:5000'
          report_html: 'zap_report.html'

      - name: Upload DAST report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dast-zap-report
          path: zap_report.html

      - name: Shutdown application
        if: always()
        run: docker-compose down